#    _       _      _ _
#   (_)_   _(_) ___(_) |_ _   _
#   | | | | | |/ __| | __| | | |
#   | | |_| | | (__| | |_| |_| |
#  _/ |\__,_|_|\___|_|\__|\__, |
# |__/                    |___/
#
# Copyright (C) 2023 @juicity <https://github.com/juicity>
#
# This is a open-source software, liscensed under the AGPL-3.0 License.
# See /License for more information.

name: Seed Build

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
        default: ${{ github.ref }}
      pr_number:
        type: number
        required: false
      build_type:
        type: string
        description: "[pr-build,main-build,daily-build]"

    secrets:
      app_id:
        required: true
      private_key:
        required: true

jobs:
  build:
    strategy:
      matrix:
        goos: [ linux ]
        goarch: [ arm64, 386, riscv64, mips64, mips64le, mipsle, mips ]
        include:
          # BEGIN Linux ARM 5 6 7
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          # END Linux ARM 5 6 7
          # BEGIN Linux AMD64 v1 v2 v3
          - goos: linux
            goarch: amd64
            goamd64: v1
          - goos: linux
            goarch: amd64
            goamd64: v2
          - goos: linux
            goarch: amd64
            goamd64: v3
          # END Linux AMD64 v1 v2 v3
          # BEGIN Darwin ARM64 AMD64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          # END Darwin ARM64 AMD64
          # BEGIN Windows ARM64 AMD64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
          # END Windows ARM64 AMD64
          # BEGIN Android ARM64
          - goos: android
            goarch: arm64
          # END Android ARM64
      fail-fast: false

    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      GOAMD64: ${{ matrix.goamd64 }}
      CGO_ENABLED: 0

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Get the version
        id: get_version
        env:
          REF: ${{ inputs.ref }}
        run: |
          date=$(git log -1 --format="%cd" --date=short | sed s/-//g)
          commit=$(echo ${REF} | cut -c1-6)
          if [[ "${{ inputs.build_type }}" == "pr-build" ]]; then
            count=$(git rev-list --count origin/main..HEAD)
            version="unstable-${date}.pr-${{ inputs.pr_number }}.r${count}.${commit}"
          else
            count=$(git rev-list --count HEAD)
            version="unstable-${date}.r${count}.${commit}"
          fi
          echo "VERSION=${version}" >> $GITHUB_OUTPUT
          echo "VERSION=${version}" >> $GITHUB_ENV

      - name: Show workflow information
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOAMD64\"].friendlyName" -r < install/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, RELEASE_NAME: $_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_OUTPUT
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.21'

      - name: Get project dependencies
        run: |
          git submodule update --init --recursive
          GOMODCACHE="${PWD}"/go-mod go mod download -modcacherw
          find ./go-mod/ -maxdepth 1 ! -name "cache" ! -name "go-mod" -exec rm -rf {} \;
          sed -i 's/#export GOMODCACHE=$(PWD)\/go-mod/export GOMODCACHE=$(PWD)\/go-mod/' Makefile

      - name: Build juicity
        run: |
          mkdir -p ./build/
          export CGO_ENABLED=0
          export GOFLAGS="-trimpath -modcacherw"
          export VERSION=${{ steps.get_version.outputs.VERSION }}
          make all
          cp ./juicity-server ./build/
          cp ./juicity-client ./build/

      - name: Rename windows name
        if: matrix.goos == 'windows'
        run: |
          mv ./build/juicity-server ./build/juicity-server.exe
          mv ./build/juicity-client ./build/juicity-client.exe

      - name: Copy systemd service
        if: matrix.goos == 'linux'
        run: |
          cp ./install/example-{client,server}.json ./build/
          cp ./install/juicity-{client,server}.service ./build/

      - name: Smoke test
        if: matrix.goarch == 'amd64' && matrix.goamd64 == 'v1'
        run: |
          ./build/juicity-server -v
          ./build/juicity-client -v

      - name: Create binary ZIP archive and Signature
        run: |
          pushd build || exit 1
          zip -9vr ../juicity-$ASSET_NAME.zip .
          popd || exit 1
          FILE=./juicity-$ASSET_NAME.zip
          DGST=$FILE.dgst
          md5sum        $FILE >>$DGST
          shasum -a 1   $FILE >>$DGST
          shasum -a 256 $FILE >>$DGST
          shasum -a 512 $FILE >>$DGST

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: juicity-${{ steps.get_filename.outputs.ASSET_NAME }}.zip
          path: build/*

      - name: Report result
        uses: daeuniverse/ci-seed-jobs/common/report-check-run@master
        if: always() && inputs.build_type == 'pr-build' && startsWith(github.event.pull_request.head.repo.full_name, github.repository_owner)
        with:
          app_id: ${{ secrets.app_id }}
          private_key: ${{ secrets.private_key }}
          id: "juicity-bot[bot]/build"
